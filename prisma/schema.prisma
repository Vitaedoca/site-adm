// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String     @unique
  passwordHash  String?    @map("password_hash")
  avatarUrl     String?    @map("avatar_url")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  tokens        Token[]
  accounts      Account[]
  member_on     Member[]
  owns_projects Project[]
  noticicia     Noticias[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  ADMIN
  REDATOR
}

model Member {
  id     String @id @default(uuid())
  role   Role   @default(REDATOR)
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("members")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  slug        String   @unique
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  owner       User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")

  @@map("projects")
}

model Noticias {
  id             String  @id @default(uuid())
  titulo         String
  nome           String
  categoria      Int
  imagem         String
  imagem_legenda String
  data           Int
  texto          String
  User           User?   @relation(fields: [userId], references: [id])
  userId         String?

  @@map("noticias")
}
